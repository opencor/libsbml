//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace libsbml {

 using System;
 using System.Runtime.InteropServices;

/** 
 * @sbmlpackage{l3v2extendedmath}
 *
@htmlinclude pkg-marker-l3v2extendedmath.html Base extension class for the package.
 *
 * @htmlinclude not-sbml-warning.html
 *
 * This is the L3v2extendedmath package extension of the SBMLExtension class
 * that is used to facilitate libSBML plug-ins in the implementation of an
 * SBMLLevel&nbsp;3 package.
 *
 */

public class L3v2extendedmathExtension : SBMLExtension {
	private HandleRef swigCPtr;
	
	internal L3v2extendedmathExtension(IntPtr cPtr, bool cMemoryOwn) : base(libsbmlPINVOKE.L3v2extendedmathExtension_SWIGUpcast(cPtr), cMemoryOwn)
	{
		//super(libsbmlPINVOKE.L3v2extendedmathExtensionUpcast(cPtr), cMemoryOwn);
		swigCPtr = new HandleRef(this, cPtr);
	}
	
	internal static HandleRef getCPtr(L3v2extendedmathExtension obj)
	{
		return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
	}
	
	internal static HandleRef getCPtrAndDisown (L3v2extendedmathExtension obj)
	{
		HandleRef ptr = new HandleRef(null, IntPtr.Zero);
		
		if (obj != null)
		{
			ptr             = obj.swigCPtr;
			obj.swigCMemOwn = false;
		}
		
		return ptr;
	}

  ~L3v2extendedmathExtension() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libsbmlPINVOKE.delete_L3v2extendedmathExtension(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  
/**
   * Returns the nickname of the SBML Level&nbsp;3 package implemented by this
   * libSBML extension.
   *
   * @return the package nickname, as a string.
   *
   *
 * @if python @note Because this is a static method on a class, the Python
 * language interface for libSBML will contain two variants.  One will be the
 * expected, normal static method on the class (i.e., a regular
 * <em>methodName</em>), and the other will be a standalone top-level
 * function with the name <em>ClassName_methodName()</em>. This is merely an
 * artifact of how the language interfaces are created in libSBML.  The
 * methods are functionally identical. @endif
 *
 *
   */ public
 static string getPackageName() {
    string ret = libsbmlPINVOKE.L3v2extendedmathExtension_getPackageName();
    return ret;
  }

  
/**
   * Returns the default SBML Level implemented by this libSBML extension.
   *
   * @return the SBML Level, as a long integereger.
   *
   *
 * @if python @note Because this is a static method on a class, the Python
 * language interface for libSBML will contain two variants.  One will be the
 * expected, normal static method on the class (i.e., a regular
 * <em>methodName</em>), and the other will be a standalone top-level
 * function with the name <em>ClassName_methodName()</em>. This is merely an
 * artifact of how the language interfaces are created in libSBML.  The
 * methods are functionally identical. @endif
 *
 *
   */ public
 static long getDefaultLevel() { return (long)libsbmlPINVOKE.L3v2extendedmathExtension_getDefaultLevel(); }

  
/**
   * Returns the default SBML Version implemented by this libSBML extension.
   *
   * @return the Version within the default SBML Level, as a long integereger.
   *
   *
 * @if python @note Because this is a static method on a class, the Python
 * language interface for libSBML will contain two variants.  One will be the
 * expected, normal static method on the class (i.e., a regular
 * <em>methodName</em>), and the other will be a standalone top-level
 * function with the name <em>ClassName_methodName()</em>. This is merely an
 * artifact of how the language interfaces are created in libSBML.  The
 * methods are functionally identical. @endif
 *
 *
   */ public
 static long getDefaultVersion() { return (long)libsbmlPINVOKE.L3v2extendedmathExtension_getDefaultVersion(); }

  
/**
   * Returns the default version of the SBML Level&nbsp;3 package implemented
   * by this libSBML extension.
   *
   * @return the default version number of the SBML Level&nbsp;3 package
   * definition, as a long integereger.
   *
   *
 * @if python @note Because this is a static method on a class, the Python
 * language interface for libSBML will contain two variants.  One will be the
 * expected, normal static method on the class (i.e., a regular
 * <em>methodName</em>), and the other will be a standalone top-level
 * function with the name <em>ClassName_methodName()</em>. This is merely an
 * artifact of how the language interfaces are created in libSBML.  The
 * methods are functionally identical. @endif
 *
 *
   */ public
 static long getDefaultPackageVersion() { return (long)libsbmlPINVOKE.L3v2extendedmathExtension_getDefaultPackageVersion(); }

  
/**
   * Returns the XML namespace URI of the SBML Level&nbsp;3 package implemented
   * by this libSBML extension.
   *
   * @return the XML namespace, as a string.
   *
   *
 * @if python @note Because this is a static method on a class, the Python
 * language interface for libSBML will contain two variants.  One will be the
 * expected, normal static method on the class (i.e., a regular
 * <em>methodName</em>), and the other will be a standalone top-level
 * function with the name <em>ClassName_methodName()</em>. This is merely an
 * artifact of how the language interfaces are created in libSBML.  The
 * methods are functionally identical. @endif
 *
 *
   */ public
 static string getXmlnsL3V1V1() {
    string ret = libsbmlPINVOKE.L3v2extendedmathExtension_getXmlnsL3V1V1();
    return ret;
  }

  
/**
  * Returns the XML namespace URI of the SBML Level&nbsp;3 package automatically
  * included in L3V2.
  *
  * @return the XML namespace, as a string.
  *
  *
 * @if python @note Because this is a static method on a class, the Python
 * language interface for libSBML will contain two variants.  One will be the
 * expected, normal static method on the class (i.e., a regular
 * <em>methodName</em>), and the other will be a standalone top-level
 * function with the name <em>ClassName_methodName()</em>. This is merely an
 * artifact of how the language interfaces are created in libSBML.  The
 * methods are functionally identical. @endif
 *
 *
  */ public
 static string getXmlnsL3V2() {
    string ret = libsbmlPINVOKE.L3v2extendedmathExtension_getXmlnsL3V2();
    return ret;
  }

  
/**
   * Creates a new L3v2extendedmathExtension instance.
   */ public
 L3v2extendedmathExtension() : this(libsbmlPINVOKE.new_L3v2extendedmathExtension__SWIG_0(), true) {
  }

  
/**
   * Copy constructor for L3v2extendedmathExtension.
   *
   * @param orig the L3v2extendedmathExtension instance to copy.
   */ public
 L3v2extendedmathExtension(L3v2extendedmathExtension orig) : this(libsbmlPINVOKE.new_L3v2extendedmathExtension__SWIG_1(L3v2extendedmathExtension.getCPtr(orig)), true) {
    if (libsbmlPINVOKE.SWIGPendingException.Pending) throw libsbmlPINVOKE.SWIGPendingException.Retrieve();
  }

  
/**
   * Creates and returns a deep copy of this L3v2extendedmathExtension object.
   *
   * @return a (deep) copy of this L3v2extendedmathExtension object.
   */ public new
 SBMLExtension clone() {
    global::System.IntPtr cPtr = libsbmlPINVOKE.L3v2extendedmathExtension_clone(swigCPtr);
    L3v2extendedmathExtension ret = (cPtr == global::System.IntPtr.Zero) ? null : new L3v2extendedmathExtension(cPtr, true);
    return ret;
  }

  
/**
   * Returns the name of this SBML Level&nbsp;3 package ('l3v2extendedmath').
   *
   * @return a string representing the name of this package
   * ('l3v2extendedmath').
   */ public new
 string getName() {
    string ret = libsbmlPINVOKE.L3v2extendedmathExtension_getName(swigCPtr);
    return ret;
  }

  
/**
   * Returns a string representing the SBML XML namespace of this SBML
   * Level&nbsp;3 package.
   *
   * @param sbmlLevel the level of SBML.
   *
   * @param sbmlVersion the version of SBML.
   *
   * @param pkgVersion the version of this package.
   *
   * @return a string representing the name of this package
   * ('l3v2extendedmath').
   *
   * The namespace URI constructed by this method corresponds to the
   * combination of the Level and Version of SBML, and the Version of the SBML
   * Level&nbsp;3 package. (At the time of this writing, the only SBML Level
   * that supports packages is Level&nbsp;3, so the value of @p sbmlLevel is
   * necessarily always <code>3</code>.)
   */ public new
 string getURI(long sbmlLevel, long sbmlVersion, long pkgVersion) {
    string ret = libsbmlPINVOKE.L3v2extendedmathExtension_getURI(swigCPtr, sbmlLevel, sbmlVersion, pkgVersion);
    return ret;
  }

  
/**
   * Returns the SBML Level for the given URI of this package.
   *
   * @param uri the string of the URI that represents one of the versions of
   * the 'l3v2extendedmath' package.
   *
   * @return the SBML Level for the given URI of this package, or @c 0 if the
   * given URI is invalid, or for a different package.
   */ public new
 long getLevel(string uri) { return (long)libsbmlPINVOKE.L3v2extendedmathExtension_getLevel(swigCPtr, uri); }

  
/**
   * Returns the Version within the SBML Level for the given URI of this
   * package.
   *
   * @param uri the string of the URI that represents one of the versions of
   * the 'l3v2extendedmath' package.
   *
   * @return the SBML Version within the SBML Level for the given URI of this
   * package, or @c 0 if the given URI is invalid, or for a different package.
   */ public new
 long getVersion(string uri) { return (long)libsbmlPINVOKE.L3v2extendedmathExtension_getVersion(swigCPtr, uri); }

  
/**
   * Returns the SBML Level&nbsp;3 package version for the given URI of this
   * package.
   *
   * @param uri the string of the URI that represents one of the versions of
   * the 'l3v2extendedmath' package.
   *
   * @return the version of the SBML Level&nbsp;3 package for the given URI of
   * this package, or @c 0 if the given URI is invalid, or for a different
   * package.
   */ public new
 long getPackageVersion(string uri) { return (long)libsbmlPINVOKE.L3v2extendedmathExtension_getPackageVersion(swigCPtr, uri); }

  
/**
   * Returns a L3v2extendedmathPkgNamespaces object.
   *
   * @param uri the string of the URI that represents one of the versions of
   * the 'l3v2extendedmath' package.
   *
   * @return L3v2extendedmathPkgNamespaces object corresponding to the given
   * URI of this package, or @c null if the given URI is not defined in the
   * 'l3v2extendedmath' package.
   */ public new
 SBMLNamespaces getSBMLExtensionNamespaces(string uri) {
	SBMLNamespaces ret
	    = (SBMLNamespaces) libsbml.DowncastSBMLNamespaces(libsbmlPINVOKE.L3v2extendedmathExtension_getSBMLExtensionNamespaces(swigCPtr, uri), false);
	return ret;
}

  
/**
   * Takes a type code of the &ldquo;l3v2extendedmath&rdquo; package and
   * returns a string describing the code.
   *
   * @param typeCode a libSBML type code defined by the libSBML extension
   * implementing support for the SBML Level&nbsp;3
   * &ldquo;l3v2extendedmath&rdquo; package.
   *
   * @return a text string representing the type code given by @p typeCode. If
   * the type code is unrecognized for this implementation of the libSBML
   * &ldquo;l3v2extendedmath&rdquo; package, the string returned will be
   * <code>'(Unknown SBML L3v2extendedmath Type)'</code>.
   */ public new
 string getStringFromTypeCode(int typeCode) {
    string ret = libsbmlPINVOKE.L3v2extendedmathExtension_getStringFromTypeCode(swigCPtr, typeCode);
    return ret;
  }

  
/** */ /* libsbml-internal */ public new
 SWIGTYPE_p_packageErrorTableEntry getErrorTable(long index) {
    SWIGTYPE_p_packageErrorTableEntry ret = new SWIGTYPE_p_packageErrorTableEntry(libsbmlPINVOKE.L3v2extendedmathExtension_getErrorTable(swigCPtr, index), true);
    return ret;
  }

  
/** */ /* libsbml-internal */ public new
 long getErrorTableIndex(long errorId) { return (long)libsbmlPINVOKE.L3v2extendedmathExtension_getErrorTableIndex(swigCPtr, errorId); }

  
/** */ /* libsbml-internal */ public new
 long getErrorIdOffset() { return (long)libsbmlPINVOKE.L3v2extendedmathExtension_getErrorIdOffset(swigCPtr); }

  
/** */ /* libsbml-internal */ public
 static void init() {
    libsbmlPINVOKE.L3v2extendedmathExtension_init();
  }

}

}
