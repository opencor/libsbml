/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.sbml.libsbml;

/** 
 *  Set of SBML Level + Version + namespace triples.
 <p>
 * <p style='color: #777; font-style: italic'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 <p>
 * {@link SBMLExtensionNamespaces} is a template class.  It is extended from
 * {@link SBMLNamespaces} and is meant to be used by package extensions to store the
 * SBML Level, Version within a Level, and package version of the SBML
 * Level&nbsp;3 package implemented by a libSBML package extension.
 <p>
 * <p>
 * <h2>Basic principles of SBML package extensions in libSBML</h2>
 <p>
 * SBML Level&nbsp;3's package structure permits modular extensions to the
 * core SBML format.  In libSBML, support for SBML Level&nbsp;3 packages is
 * provided through optional <em>package extensions</em> that can be plugged
 * into libSBML at the time it is built/compiled.  Users of libSBML can thus
 * choose which extensions are enabled in their software applications.
 <p>
 * LibSBML defines a number of classes that developers of package extensions
 * can use to implement support for an SBML Level&nbsp;3 package.  These
 * classes make it easier to extend libSBML objects with new attributes
 * and/or subobjects as needed by a particular Level&nbsp;3 package.
 * Three overall categories of classes make up libSBML's facilities for
 * implementing package extensions.  There are (1) classes that serve as base
 * classes meant to be subclassed, (2) template classes meant to be
 * instantiated rather than subclassed, and (3) support classes that provide
 * utility features. A given package implementation for libSBML will take
 * the form of code using these and other libSBML classes, placed in a
 * subdirectory of <code>src/sbml/packages/</code>.
 <p>
 * The basic libSBML distribution includes a number of package extensions
 * implementing support for officially-endorsed SBML Level&nbsp;3 packages;
 * among these are <em>Flux Balance Constraints</em> ('fbc'),
 * <em>Hierarchical Model Composition</em> ('comp'), <em>Layout</em>
 * ('layout'), and <em>Qualitative Models</em> ('qual').  They can serve as
 * working examples for developers working to implement other packages.
 <p>
 * Extensions in libSBML can currently only be implemented in C++ or C;
 * there is no mechanism to implement them first in languages such as
 * Java or Python.  However, once implemented in C++ or C, language
 * interfaces can be generated semi-automatically using the framework in
 * place in libSBML.  (The approach is based on using <a target='_blank'
 * href='http://www.swig.org'>SWIG</a> and facilities in libSBML's build
 * system.)
 */

public class L3v2extendedmathPkgNamespaces extends SBMLNamespaces {
   private long swigCPtr;

   protected L3v2extendedmathPkgNamespaces(long cPtr, boolean cMemoryOwn)
   {
     super(libsbmlJNI.L3v2extendedmathPkgNamespaces_SWIGUpcast(cPtr), cMemoryOwn);
     swigCPtr = cPtr;
   }

   protected static long getCPtr(L3v2extendedmathPkgNamespaces obj)
   {
     return (obj == null) ? 0 : obj.swigCPtr;
   }

   protected static long getCPtrAndDisown (L3v2extendedmathPkgNamespaces obj)
   {
     long ptr = 0;

     if (obj != null)
     {
       ptr             = obj.swigCPtr;
       obj.swigCMemOwn = false;
     }

     return ptr;
   }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        libsbmlJNI.delete_L3v2extendedmathPkgNamespaces(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public L3v2extendedmathPkgNamespaces(long level, long version, long pkgVersion, String prefix) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_L3v2extendedmathPkgNamespaces__SWIG_0(level, version, pkgVersion, prefix), true);
  }

  public L3v2extendedmathPkgNamespaces(long level, long version, long pkgVersion) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_L3v2extendedmathPkgNamespaces__SWIG_1(level, version, pkgVersion), true);
  }

  public L3v2extendedmathPkgNamespaces(long level, long version) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_L3v2extendedmathPkgNamespaces__SWIG_2(level, version), true);
  }

  public L3v2extendedmathPkgNamespaces(long level) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_L3v2extendedmathPkgNamespaces__SWIG_3(level), true);
  }

  public L3v2extendedmathPkgNamespaces() throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_L3v2extendedmathPkgNamespaces__SWIG_4(), true);
  }

  public L3v2extendedmathPkgNamespaces(L3v2extendedmathPkgNamespaces orig) throws org.sbml.libsbml.SBMLConstructorException {
    this(libsbmlJNI.new_L3v2extendedmathPkgNamespaces__SWIG_5(L3v2extendedmathPkgNamespaces.getCPtr(orig), orig), true);
  }

  
/**
   * Creates and returns a deep copy of this {@link SBMLNamespaces} object.
   <p>
   * @return the (deep) copy of this {@link SBMLNamespaces} object.
   */ public
 SBMLNamespaces cloneObject() {
    long cPtr = libsbmlJNI.L3v2extendedmathPkgNamespaces_cloneObject(swigCPtr, this);
    return (cPtr == 0) ? null : new ISBMLExtensionNamespaces(cPtr, true);
  }

  
/**
   * Returns a string representing the SBML XML namespace of this
   * object.
   <p>
   * @return a string representing the SBML namespace that reflects the
   * SBML Level and Version of this object.
   */ public
 String getURI() {
    return libsbmlJNI.L3v2extendedmathPkgNamespaces_getURI(swigCPtr, this);
  }

  public long getPackageVersion() {
    return libsbmlJNI.L3v2extendedmathPkgNamespaces_getPackageVersion(swigCPtr, this);
  }

  
/**
   * Returns the name of the main package for this namespace.
   <p>
   * @return the name of the main package for this namespace.
   * 'core' will be returned if this namespace is defined in the SBML 
   * core. 
   */ public
 String getPackageName() {
    return libsbmlJNI.L3v2extendedmathPkgNamespaces_getPackageName(swigCPtr, this);
  }

}
